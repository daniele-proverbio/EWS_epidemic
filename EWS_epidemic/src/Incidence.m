%% Performance of early warning signals for disease emergence
% This notebook generates the analysis using incidence data
%
% Author: Daniele Proverbio
% Date: 15/09/2020
% Affiliation: Luxembourg Center for Systems Biomedicine, University of
% Luxembourg
% Contacts: daniele.proverbio@{uni.lu, outlook.com}

function Incidence()

%%
clc; clear; close all;

%% Dataset

% time
t1 = datetime(2020,2,25,8,0,0);
t2 = datetime(2020,9,13,8,0,0);
dates = t1:t2;

% Most "Controlled" Test set
% Data from Ministry of Health (new cases)
Luxembourg = [0	0	0	0	1	0	0	0	0	1	1	1	0	0	0	2	15	24	21	0	33	122	158	143	175	127	21	242	193	170	263	196	127	44	171	112	191	129	117	71	39	77	87	80	71	48	12	19	3	76	50	44	55	19	8	31	48	18	20	32	15	6	12	33	16	14	7	12	4	12	11	9	11	6	9	2	7	10	12	7	9	13	2	12	12	9	1	9	2	1	2	6	7	4	4	2	1	1	4	4	5	2	4	1	6	3	7	3	4	8	2	6	10	3	7	9	17	0	15	3	13	20	44	32	13	53	29	54	53	30	55	15	58	61	59	44	65	83	31	100	66	163	124	84	112	35	86	129	98	104	146	83	48	39	157	82	78	98	62	9	53	92	66	40	56	36	11	26	58	64	36	34	19	11	30	67	71	67	58	27	14	35	90	62	46	48	52	4	29	57	71	48	53	56	10	18	54	78	81	45	51	9];
Lux_rebound = datetime('29-06-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Lux_arima_data1 = readtable('../data/arima_results_incidence/output215_LUX_1.xlsx');
Lux_arima_data1 = Lux_arima_data1{1:195,2}';

% Additional Test set
% Data: from John Hopkins University database

% State of Victoria (Australia) -> most representative, lower heterogeneity
Austria_cumulative = [ 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,2 ,3 ,3 ,9 ,14 ,18 ,21 ,29 ,41 ,55 ,79 ,104 ,131 ,182 ,246 ,302 ,504 ,655 ,860 ,1018 ,1332 ,1646 ,2013 ,2388 ,2814 ,3582 ,4474 ,5283 ,5588 ,6909 ,7657 ,8271 ,8788 ,9618 ,10180 ,10711 ,11129 ,11524 ,11781 ,12051 ,12297 ,12639 ,12942 ,13244 ,13555 ,13806 ,13945 ,14041 ,14226 ,14336 ,14476 ,14595 ,14671 ,14749 ,14795 ,14873 ,14925 ,15002 ,15071 ,15148 ,15225 ,15274 ,15357 ,15402 ,15452 ,15531 ,15558 ,15597 ,15621 ,15650 ,15684 ,15752 ,15774 ,15833 ,15871 ,15882 ,15961 ,15997 ,16058 ,16109 ,16201 ,16242 ,16269 ,16321 ,16353 ,16404 ,16436 ,16486 ,16503 ,16539 ,16557 ,16591 ,16628 ,16655 ,16685 ,16731 ,16733 ,16759 ,16771 ,16805 ,16843 ,16898 ,16902 ,16968 ,16979 ,17005 ,17034 ,17064 ,17078 ,17109 ,17135 ,17189 ,17203 ,17223 ,17271 ,17323 ,17341 ,17380 ,17408 ,17449 ,17477 ,17522 ,17580 ,17654 ,17723 ,17766 ,17873 ,17941 ,18050 ,18165 ,18280 ,18365 ,18421 ,18513 ,18615 ,18709 ,18783 ,18897 ,18948 ,19021 ,19154 ,19270 ,19439 ,19573 ,19655 ,19743 ,19827 ,19929 ,20099 ,20214 ,20338 ,20472 ,20558 ,20677 ,20850 ,20955 ,21130 ,21212 ,21304 ,21385 ,21481 ,21566 ,21696 ,21837 ,21919 ,22033 ,22106 ,22245 ,22439 ,22594 ,22876 ,23179 ,23370 ,23534 ,23829 ,24084 ,24431 ,24762 ,25062 ,25253 ,25495 ,25706 ,26033 ,26361 ,26590 ,26985 ,27166 ,27438 ,27642 ,27969 ,28372 ,28729 ,29087 ,29271 ,29561 ,30081 ,30583 ,31247 ,31827 ,32696 ,33159];
Austria = diff(Austria_cumulative);
Austria = Austria(34:end);
Austria_rebound = datetime('03-07-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Aut_arima_data1 = readtable('../data/arima_results_incidence/output114_AUT_1.xlsx');
Aut_arima_data1 = Aut_arima_data1{1:195,2}';

Victoria_cumulative = [0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,2 ,3 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,7 ,7 ,9 ,9 ,10 ,10 ,10 ,11 ,11 ,15 ,18 ,21 ,21 ,36 ,49 ,57 ,71 ,94 ,121 ,121 ,121 ,229 ,355 ,355 ,411 ,466 ,520 ,574 ,685 ,769 ,821 ,917 ,968 ,1036 ,1085 ,1115 ,1135 ,1158 ,1191 ,1212 ,1228 ,1241 ,1265 ,1268 ,1281 ,1291 ,1299 ,1299 ,1302 ,1319 ,1328 ,1329 ,1336 ,1336 ,1337 ,1343 ,1346 ,1349 ,1349 ,1354 ,1361 ,1364 ,1371 ,1384 ,1406 ,1423 ,1440 ,1454 ,1467 ,1468 ,1487 ,1496 ,1511 ,1514 ,1521 ,1540 ,1551 ,1558 ,1564 ,1573 ,1573 ,1581 ,1593 ,1593 ,1603 ,1605 ,1610 ,1618 ,1628 ,1634 ,1645 ,1649 ,1653 ,1663 ,1670 ,1678 ,1681 ,1681 ,1685 ,1687 ,1687 ,1691 ,1699 ,1703 ,1703 ,1720 ,1732 ,1741 ,1762 ,1780 ,1792 ,1792 ,1836 ,1847 ,1864 ,1884 ,1917 ,1947 ,1947 ,2028 ,2099 ,2159 ,2231 ,2303 ,2368 ,2368 ,2536 ,2660 ,2824 ,2942 ,3098 ,3397 ,3560 ,3799 ,3967 ,4224 ,4448 ,4750 ,5165 ,5353 ,5696 ,5942 ,6289 ,6739 ,7125 ,7405 ,7744 ,8181 ,8696 ,9049 ,9304 ,9998 ,10577 ,10931 ,11557 ,11937 ,12335 ,13035 ,13469 ,13867 ,14283 ,14659 ,14957 ,15251 ,15646 ,15863 ,16234 ,16517 ,16764 ,17027 ,17238 ,17446 ,17683 ,17852 ,18029 ,18231 ,18330 ,18464 ,18608 ,18714 ,18822 ,18903 ,19015 ,19080 ,19138 ,19224 ,19336 ,19415 ,19479 ,19538 ,19574 ,19615 ,19688 ,19739 ,19767 ,19800 ,19835 ,19872];
Victoria = diff(Victoria_cumulative);
Victoria = Victoria(34:end);
Victoria_rebound = datetime('29-06-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Aus_arima_data1 = readtable('../data/arima_results_incidence/output210_AUS_1.xlsx');
Aus_arima_data1 = Aus_arima_data1{1:195,2}';

Korea_cumulative = [1,1,2,2,3,4,4,4,4,11,12,15,15,16,19,23,24,24,25,27,28,28,28,28,28,29,30,31,31,104,204,433,602,833,977,1261,1766,2337,3150,3736,4335,5186,5621,6088,6593,7041,7314,7478,7513,7755,7869,7979,8086,8162,8236,8320,8413,8565,8652,8799,8961,8961,9037,9137,9241,9332,9478,9583,9661,9786,9887,9976,10062,10156,10237,10284,10331,10384,10423,10450,10480,10512,10537,10564,10591,10613,10635,10653,10661,10674,10683,10694,10708,10718,10728,10738,10752,10761,10765,10774,10780,10793,10801,10804,10806,10810,10822,10840,10874,10909,10936,10962,10991,11018,11037,11050,11065,11078,11110,11122,11142,11165,11190,11206,11225,11265,11344,11402,11441,11468,11503,11541,11590,11629,11668,11719,11776,11814,11852,11902,11947,12003,12051,12085,12121,12155,12198,12257,12306,12373,12421,12438,12484,12535,12563,12602,12653,12715,12757,12800,12850,12904,12967,13030,13091,13137,13181,13244,13293,13338,13373,13417,13479,13512,13551,13612,13672,13711,13745,13771,13816,13879,13938,13979,14092,14150,14175,14203,14251,14269,14305,14336,14366,14389,14423,14456,14499,14519,14562,14598,14626,14660,14714,14770,14873,15039,15318,15515,15761,16058,16346,16670,17002,17399,17665,17945,18265,18706,19077,19400,19699,19947,20182,20449,20644,20842,21010,21177,21296,21432,21588,21743,21919,22055,22176,22285];
Korea = diff(Korea_cumulative);
Korea = Korea(34:end);
Korea_rebound = datetime('13-08-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Kor_arima_data1 = readtable('../data/arima_results_incidence/output011_KOR_1.xlsx');
Kor_arima_data1 = Kor_arima_data1{1:195,2}';

Singapore_cumulative = [0,1,3,3,4,5,7,7,10,13,16,18,18,24,28,28,30,33,40,45,47,50,58,67,72,75,77,81,84,84,85,85,89,89,91,93,93,93,102,106,108,110,110,117,130,138,150,150,160,178,178,200,212,226,243,266,313,345,385,432,455,509,558,631,683,732,802,844,879,926,1000,1049,1114,1189,1309,1375,1481,1623,1910,2108,2299,2532,2918,3252,3699,4427,5050,5992,6588,8014,9125,10141,11178,12075,12693,13624,14423,14951,15641,16169,17101,17548,18205,18778,19410,20198,20939,21707,22460,23336,23822,24671,25346,26098,26891,27356,28038,28343,28794,29364,29812,30426,31068,31616,31960,32343,32876,33249,33860,34366,34884,35292,35836,36405,36922,37183,37527,37910,38296,38514,38965,39387,39850,40197,40604,40818,40969,41216,41473,41615,41833,42095,42313,42432,42623,42736,42955,43246,43459,43661,43907,44122,44310,44479,44664,44800,44983,45140,45298,45423,45614,45783,45961,46283,46630,46878,47126,47453,47655,47912,48035,48434,48744,49098,49375,49888,50369,50838,51197,51531,51809,52205,52512,52825,53051,53346,54254,54555,54797,54929,55104,55292,55353,55395,55497,55580,55661,55747,55838,55938,56031,56099,56216,56266,56353,56404,56435,56495,56572,56666,56717,56771,56812,56852,56860,56908,56948,56982,57022,57044,57091,57166,57229,57315,57357,57406];
Singapore = diff(Singapore_cumulative);
Singapore = Singapore(34:end);
Singapore_rebound = datetime('25-07-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Sgp_arima_data1 = readtable('../data/arima_results_incidence/output120_SPG_1.xlsx');
Sgp_arima_data1 = Sgp_arima_data1{1:195,2}';

% Incidence data. From "https://github.com/pcm-dpc/COVID-19",
% extracted in
% "../MATLAB/Covid/EWS_second_outbreak/dati-regioni/italian_data.m"
Veneto_incidence = [32	10	28	40	40	40	72	10	34	53	47	81	55	127	74	112	167	361	211	342	235	301	231	510	270	547	586	505	383	443	494	493	562	433	428	366	431	470	486	353	360	402	362	337	485	523	488	347	309	174	181	192	366	384	318	243	192	277	334	143	348	162	80	108	129	117	135	138	126	94	55	29	77	74	65	53	51	19	41	31	32	44	39	13	9	47	33	8	21	10	17	11	8	8	12	9	12	6	2	8	2	4	6	8	1	4	4	3	5	0	13	7	1	1	4	8	2	3	7	2	3	3	4	5	2	11	3	8	3	20	5	4	8	1	14	7	10	11	10	16	6	19	21	29	55	34	48	42	22	36	22	30	31	19	16	24	42	112	117	46	45	22	20	41	58	183	63	58	20	65	60	84	127	120	78	46	60	59	159	116	160	145	116	119	147	132	135	151	109	65	97	163	115	273	188	179	69	105	91	147	173	138	142];
Veneto = Veneto_incidence(2:end);
Veneto_rebound = datetime('29-07-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Ven_arima_data1 = readtable('../data/arima_results_incidence/output021_VEN_1.xlsx');
Ven_arima_data1 = Ven_arima_data1{1:195,2}';

% "Stress" set

Denmark_cumulative = [0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,3 ,4 ,4 ,6 ,10 ,10 ,23 ,23 ,35 ,90 ,262 ,442 ,615 ,801 ,827 ,864 ,914 ,977 ,1057 ,1151 ,1255 ,1326 ,1395 ,1450 ,1591 ,1724 ,1877 ,2046 ,2201 ,2395 ,2577 ,2860 ,3107 ,3386 ,3757 ,4077 ,4369 ,4681 ,5071 ,5402 ,5635 ,5819 ,5996 ,6174 ,6318 ,6511 ,6681 ,6879 ,7073 ,7242 ,7384 ,7515 ,7695 ,7912 ,8073 ,8210 ,8445 ,8575 ,8698 ,8851 ,9008 ,9158 ,9311 ,9407 ,9523 ,9670 ,9821 ,9938 ,10083 ,10218 ,10319 ,10429 ,10513 ,10591 ,10667 ,10713 ,10791 ,10858 ,10927 ,10968 ,11044 ,11117 ,11182 ,11230 ,11289 ,11360 ,11387 ,11428 ,11480 ,11512 ,11593 ,11633 ,11669 ,11699 ,11734 ,11771 ,11811 ,11875 ,11924 ,11948 ,11962 ,12001 ,12016 ,12035 ,12099 ,12139 ,12193 ,12217 ,12250 ,12294 ,12344 ,12391 ,12391 ,12391 ,12527 ,12561 ,12615 ,12636 ,12675 ,12675 ,12675 ,12751 ,12768 ,12794 ,12815 ,12832 ,12832 ,12832 ,12878 ,12888 ,12900 ,12916 ,12946 ,12946 ,12946 ,13037 ,13061 ,13092 ,13124 ,13173 ,13173 ,13173 ,13262 ,13302 ,13350 ,13390 ,13438 ,13438 ,13438 ,13547 ,13577 ,13634 ,13725 ,13789 ,13789 ,13789 ,13996 ,14073 ,14185 ,14306 ,14442 ,14442 ,14442 ,14815 ,14959 ,15070 ,15214 ,15379 ,15483 ,15617 ,15740 ,15855 ,15940 ,16056 ,16127 ,16239 ,16317 ,16397 ,16480 ,16537 ,16627 ,16700 ,16779 ,16891 ,16985 ,17084 ,17195 ,17374 ,17547 ,17736 ,17883 ,18113 ,18356 ,18607 ,18924 ,19216 ,19557 ,19890];
Denmark = diff(Denmark_cumulative);
Denmark = Denmark(34:end);
Denmark_rebound = datetime('03-08-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Dnk_arima_data1 = readtable('../data/arima_results_incidence/output310_DNK_1.xlsx');
Dnk_arima_data1 = Dnk_arima_data1{1:195,2}';

Israel_cumulative = [0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,2 ,3 ,4 ,7 ,10 ,10 ,12 ,15 ,20 ,37 ,43 ,61 ,61 ,75 ,79 ,100 ,126 ,155 ,213 ,218 ,250 ,304 ,427 ,529 ,712 ,883 ,1071 ,1238 ,2369 ,2693 ,3035 ,3619 ,4247 ,4695 ,5358 ,6092 ,6857 ,7428 ,7851 ,8430 ,8904 ,9248 ,9404 ,9968 ,10408 ,10743 ,11145 ,11586 ,12046 ,12501 ,12758 ,12982 ,13265 ,13491 ,13713 ,13942 ,14498 ,14803 ,15058 ,15298 ,15443 ,15555 ,15728 ,15834 ,15946 ,16101 ,16185 ,16208 ,16246 ,16289 ,16310 ,16381 ,16436 ,16454 ,16477 ,16506 ,16529 ,16548 ,16579 ,16589 ,16608 ,16617 ,16643 ,16659 ,16667 ,16683 ,16690 ,16712 ,16717 ,16734 ,16757 ,16793 ,16872 ,16987 ,17012 ,17071 ,17169 ,17285 ,17377 ,17495 ,17562 ,17752 ,17863 ,18032 ,18180 ,18355 ,18569 ,18795 ,18972 ,19055 ,19237 ,19495 ,19783 ,20036 ,20339 ,20633 ,20778 ,21082 ,21512 ,22044 ,22400 ,22800 ,23421 ,23755 ,24441 ,25244 ,26257 ,27047 ,28055 ,29170 ,29958 ,30749 ,32222 ,33557 ,34825 ,36266 ,37464 ,38670 ,40632 ,42360 ,44188 ,46059 ,47459 ,49365 ,50289 ,52003 ,54042 ,56085 ,57982 ,59475 ,60678 ,61956 ,63985 ,66293 ,68299 ,70036 ,70970 ,72218 ,72815 ,74430 ,76198 ,77919 ,79559 ,80991 ,82324 ,83002 ,84722 ,86593 ,88151 ,89822 ,91080 ,92233 ,92680 ,94751 ,96409 ,97969 ,99599 ,100716 ,101933 ,102663 ,104472 ,106460 ,108403 ,110403 ,112000 ,113465 ,114020 ,116596 ,118538 ,121464 ,124455 ,126419 ,128936 ,130644 ,133975 ,137565 ,141097 ,145526 ,148564 ,152722 ,155604];
Israel = diff(Israel_cumulative);
Israel = Israel(34:end);
Israel_rebound = datetime('29-05-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Isr_arima_data1 = readtable('../data/arima_results_incidence/output011_ISR_1.xlsx');
Isr_arima_data1 = Isr_arima_data1{1:195,2}';

Japan_cumulative = [2 ,2 ,2 ,2 ,4 ,4 ,7 ,7 ,11 ,15 ,20 ,20 ,20 ,22 ,23 ,23 ,23 ,24 ,24 ,26 ,27 ,28 ,33 ,43 ,54 ,60 ,67 ,79 ,85 ,95 ,112 ,137 ,149 ,160 ,173 ,192 ,218 ,236 ,245 ,259 ,278 ,298 ,333 ,365 ,420 ,466 ,499 ,527 ,585 ,640 ,696 ,733 ,795 ,826 ,843 ,893 ,928 ,968 ,1022 ,1059 ,1104 ,1144 ,1217 ,1314 ,1416 ,1530 ,1728 ,1907 ,2001 ,2255 ,2535 ,2818 ,3154 ,3525 ,3876 ,4110 ,4485 ,5020 ,5614 ,6250 ,6951 ,7473 ,7773 ,8277 ,8835 ,9398 ,9958 ,10548 ,10914 ,11258 ,11641 ,12037 ,12469 ,12854 ,13186 ,13405 ,13576 ,13860 ,14076 ,14284 ,14558 ,14861 ,15061 ,15229 ,15354 ,15455 ,15553 ,15640 ,15755 ,15824 ,15861 ,15948 ,15998 ,16096 ,16148 ,16202 ,16226 ,16259 ,16287 ,16321 ,16362 ,16385 ,16410 ,16451 ,16472 ,16502 ,16528 ,16598 ,16673 ,16716 ,16751 ,16787 ,16837 ,16867 ,16911 ,16958 ,17000 ,17039 ,17060 ,17111 ,17146 ,17187 ,17250 ,17293 ,17369 ,17439 ,17484 ,17530 ,17588 ,17658 ,17725 ,17780 ,17820 ,17879 ,17963 ,18055 ,18162 ,18254 ,18366 ,18476 ,18615 ,18838 ,19055 ,19185 ,19461 ,19668 ,19848 ,20055 ,20261 ,20617 ,21044 ,21430 ,21841 ,22125 ,22437 ,23172 ,23510 ,24104 ,24946 ,25446 ,25706 ,26463 ,27136 ,28114 ,28883 ,29684 ,30548 ,31142 ,32116 ,33382 ,35144 ,36234 ,37804 ,39116 ,40099 ,41347 ,42686 ,44167 ,45764 ,47342 ,48782 ,49617 ,50302 ,51288 ,52471 ,53818 ,55051 ,56074 ,56717 ,57636 ,58728 ,59900 ,60949 ,61916 ,62658 ,63158 ,63888 ,64779 ,65653 ,66499 ,67353 ,67958 ,68396 ,69023 ,69619 ,70278 ,70866 ,71467 ,71918 ,72213 ,72724 ,73264 ,73916 ,74558 ,75206 ,75646];
Japan = diff(Japan_cumulative);
Japan = Japan(34:end);
Japan_rebound = datetime('28-06-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Jpn_arima_data1 = readtable('../data/arima_results_incidence/output715_JPN_1.xlsx');
Jpn_arima_data1 = Jpn_arima_data1{1:195,2}';

Nepal_cumulative = [0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2 ,2 ,3 ,3 ,4 ,5 ,5 ,5 ,5 ,5 ,6 ,6 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,12 ,14 ,16 ,16 ,16 ,30 ,31 ,31 ,31 ,43 ,45 ,48 ,49 ,49 ,52 ,52 ,54 ,57 ,57 ,59 ,59 ,75 ,75 ,82 ,99 ,101 ,102 ,110 ,110 ,134 ,217 ,250 ,249 ,267 ,291 ,295 ,375 ,402 ,427 ,457 ,516 ,584 ,603 ,682 ,772 ,886 ,1042 ,1212 ,1401 ,1572 ,1811 ,2099 ,2300 ,2634 ,2912 ,3235 ,3448 ,3762 ,4086 ,4364 ,4614 ,5062 ,5335 ,5760 ,6211 ,6591 ,7177 ,7848 ,8274 ,8605 ,9026 ,9561 ,10099 ,10728 ,11162 ,11755 ,12309 ,12772 ,13248 ,13564 ,14046 ,14519 ,15259 ,15491 ,15784 ,15964 ,16168 ,16423 ,16531 ,16649 ,16719 ,16801 ,16945 ,17061 ,17177 ,17344 ,17445 ,17502 ,17658 ,17844 ,17994 ,18094 ,18241 ,18374 ,18483 ,18613 ,18752 ,19063 ,19273 ,19547 ,19771 ,20086 ,20332 ,20750 ,21009 ,21390 ,21750 ,22214 ,22592 ,22972 ,23310 ,23948 ,24432 ,24957 ,25551 ,26019 ,26660 ,27241 ,28257 ,28938 ,29645 ,30483 ,31117 ,31935 ,32678 ,33533 ,34418 ,35529 ,36456 ,37340 ,38561 ,39460 ,40529 ,41649 ,42877 ,44236 ,45277 ,46257 ,47236 ,48138 ,49219 ,50465 ,51919 ,53120 ,54159];
Nepal = diff(Nepal_cumulative);
Nepal = Nepal(34:end);
Nepal_rebound = datetime('29-07-2020 08:00:00','InputFormat','dd-MM-yyyy hh:mm:ss');
Npl_arima_data1 = readtable('../data/arima_results_incidence/output011_NPL_1.xlsx');
Npl_arima_data1 = Npl_arima_data1{1:195,2}';

% Data matrix
country_names = ["AUS","AUT","DNK","ISR","JPN","KOR","LUX","NPL","SGP","VEN"];
data_matrix = [Victoria;Austria;Denmark;Israel;Japan;Korea;Luxembourg;Nepal;Singapore;Veneto];
rebound_vector = [Victoria_rebound;Austria_rebound;Denmark_rebound;Israel_rebound;Japan_rebound;Korea_rebound;Lux_rebound;Nepal_rebound;Singapore_rebound;Veneto_rebound];
arima_matrix = [Aus_arima_data1; Aut_arima_data1; Dnk_arima_data1; Isr_arima_data1; Jpn_arima_data1; Kor_arima_data1; Lux_arima_data1; Npl_arima_data1; Sgp_arima_data1; Ven_arima_data1];


%% Analysis

%% Analysis for EWS from CT

window_size = [7 14 21];

%smoothing, with gaussian filtering, for EWS
smoothed_daily_matrix = [];  
for n=1:size(data_matrix,1)
    smoothed_daily_matrix = [smoothed_daily_matrix ; smoothdata(data_matrix(n,1:end),'gaussian',7)];
end

%detrending data for EWS from CT
detrended_matrix = data_matrix - smoothed_daily_matrix; 


% Estimate variance over rolling window
variance_matrix = [];
for n=1:size(data_matrix,1)
    variance_matrix = [variance_matrix ; movvar(detrended_matrix(n,1:end),[window_size(1) 0])];
end
variance_arima_lux = movvar(Lux_arima_data1,[window_size(1) 0]);


variance_matrix1 = [];
for n=1:size(data_matrix,1)
    variance_matrix1 = [variance_matrix1 ; movvar(detrended_matrix(n,1:end),[window_size(2) 0])];
end
variance_arima1 = movvar(Lux_arima_data1,[window_size(2) 0]);

variance_matrix2 = [];
for n=1:size(data_matrix,1)
    variance_matrix2 = [variance_matrix2 ; movvar(detrended_matrix(n,1:end),[window_size(3) 0])];
end
variance_arima2_lux = movvar(Lux_arima_data1,[window_size(3) 0]);

variance_matrix_arima = [];
for n=1:size(data_matrix,1)
    variance_matrix_arima = [variance_matrix_arima ; movvar(arima_matrix(n,1:end),[window_size(2) 0])];
end


% Estimate Coefficient of Variation over rolling window
CV_matrix = [];
for n=1:size(data_matrix,1)
    CV_matrix = [CV_matrix ; variance_matrix1(n,1:end) ./ smoothed_daily_matrix(n,1:end)];
end

CV_matrix_arima = [];
for n=1:size(data_matrix,1)
    CV_matrix_arima = [CV_matrix_arima ; variance_matrix_arima(n,1:end) ./ smoothed_daily_matrix(n,2:end-6)];
end

% Estimate Autocorrelation over rolling window
AC_matrix = [];
for n=1:size(data_matrix,1)
    for a = window_size(2)+1 : (size(detrended_matrix,2)-1)
        vals_t = detrended_matrix(n,a-window_size(2):a);
        vals_t_minus_1 = detrended_matrix(n,a-window_size(2)+1:a+1);
        coeff = corrcoef(vals_t,vals_t_minus_1);
        AC_matrix(n,a) = abs(coeff(1,2));
    end
end

AC_matrix_arima = [];
for n=1:size(arima_matrix,1)
    for a = window_size(2)+1 : (size(arima_matrix,2)-1)
        vals_t = arima_matrix(n,a-window_size(2):a);
        vals_t_minus_1 = arima_matrix(n,a-window_size(2)+1:a+1);
        coeff = corrcoef(vals_t,vals_t_minus_1);
        AC_matrix_arima(n,a) = abs(coeff(1,2));
    end
end

% Skewness over rolling window
skewness_matrix = [];
for n=1:size(data_matrix,1)
    temp = zeros(1,size(detrended_matrix,2));
    for m = window_size(2) : (size(detrended_matrix,2)-window_size(2))
        temp(m) = skewness(detrended_matrix(n,m:m+window_size(2)-1));
    end
    skewness_matrix = [skewness_matrix ; temp];
end

skewness_matrix_arima = [];
for n=1:size(arima_matrix,1)
    temp = zeros(1,size(arima_matrix,2));
    for m = window_size(2) : (size(arima_matrix,2)-window_size(2))
        temp(m) = skewness(arima_matrix(n,m:m+window_size(2)-1));
    end
    skewness_matrix_arima = [skewness_matrix_arima ; temp];
end


%% Fig 1

% R(t) slopes
% Computed in Analysis_Reff.ipynb

slopes = [0.005642790415446323, 0.006477881221224299, 0.03259130915364852, 0.0547752314755093, 0.015802249992528068, 0.014985197306863053, 0.006222142952193831, 0.041113708406038375, 0.009430128512040729,0.010916453131815539];
slope_errs = [0.00175978, 0.00080739, 0.00255948, 0.01088526, 0.00195083, 0.00236829, 0.00060552, 0.00220103, 0.00268602,0.00051266];


% Noise
% Having a look at the distribution of residuals


skew = [];
kurt = [];
for n = 1 : size(data_matrix,1)
    skew(n) = skewness(detrended_matrix(n,1:end));
    kurt(n) = kurtosis(detrended_matrix(n,1:end));
end

figure()
subplot(2,2,1:2);
plot(dates,Luxembourg)
xline(rebound_vector(7),'--');
ylabel('Active cases Luxembourg')
title('(a)', 'FontSize', 12);


subplot(2,2,3);
yyaxis left
h2 = plot(skew,'s','MarkerFaceColor','b');
set(h2, 'markerfacecolor', get(h2, 'color'));
yline(0,'--b')
ylabel('Skewness')

yyaxis right
h1 = plot(kurt-3,'o');
set(h1, 'markerfacecolor', get(h1, 'color'));
ylabel('Excess kurtosis')
xticks([1 2 3 4 5 6 7 8 9 10])
xticklabels({'AUS','AUT','DNK','ISR','JPN','KOR','LUX','NPL','SGP','VEN'})
xtickangle(90)
ylim([-20,40])

title('(b)', 'FontSize', 12);

subplot(2,2,4);
errorbar(slopes,slope_errs,'o','MarkerFaceColor','b')
ylabel('Slope of R(t)')
xticks([1 2 3 4 5 6 7 8 9 10])
xticklabels({'AUS','AUT','DNK','ISR','JPN','KOR','LUX','NPL','SGP','VEN'})
xtickangle(90)
title('(c)', 'FontSize', 12);


%% Fig 2: Consider detrended fluctuations from ARIMA model
country =7;
idx_rebound = find(dates == rebound_vector(country)); 

smoothed_gaus_Lux =  smoothdata(Luxembourg,'gaussian',7);
smoothed_movmean_Lux = movmean(Luxembourg,7);

detrended_Lux_gaus = Luxembourg - smoothed_gaus_Lux; 
detrended_Lux = Luxembourg - smoothed_movmean_Lux; 

coefficient = corrcoef(detrended_Lux_gaus,detrended_Lux);

figure()
subplot(2,2,[1,2])
hold on
title('(a)')
plot(dates(1:end-7),Lux_arima_data1)
plot(dates(2:end-3),detrended_Lux(2:end-3))
plot(detrended_Lux_gaus(2:end-3))
legend(["ARIMA","Moving average", "Gaussian kernel"],'Position',[0.715178571428571 0.833323295109492 0.188392857142857 0.0904761904761905])
xlabel('Date points')
ylabel('Detrended residuals')


subplot(2,2,3)
plot(detrended_Lux_gaus,detrended_Lux,'k.')
title('(b)')
xlabel("Residuals (Gaussian)")
ylabel("Residuals (Moving avg)")
txt = ['\rho = ', num2str((coefficient(1,2)))];
text(-10,-70,txt,'fontsize',11)
grid on;
% 
coefficient1 = corrcoef(detrended_Lux(1:end-8),Lux_arima_data1(2:end));
subplot(2,2,4)
plot(detrended_Lux(1:end-8),Lux_arima_data1(2:end),'k.')
title('(c)')
xlabel("Residuals (Gaussian)")
ylabel("Residuals (ARIMA)")
txt = ['\rho = ', num2str((coefficient1(1,2)))];
text(10,-120,txt,'fontsize',11)
grid on;

%% Fig 3 (local behavior)
country =7;

kendall1 = corr(variance_matrix(country,idx_rebound-14:idx_rebound)',variance_matrix(country,idx_rebound-13:idx_rebound+1)','type','Kendall');
kendall2 = corr(variance_matrix1(country,idx_rebound-14:idx_rebound)',variance_matrix1(country,idx_rebound-13:idx_rebound+1)','type','Kendall');
kendall3 = corr(variance_matrix2(country,idx_rebound-14:idx_rebound)',variance_matrix2(country,idx_rebound-13:idx_rebound+1)','type','Kendall');
kendall4 = corr(variance_arima_lux(idx_rebound-14:idx_rebound)',variance_arima_lux(idx_rebound-13:idx_rebound+1)','type','Kendall');
kendall5 = corr(variance_arima1(idx_rebound-14:idx_rebound)',variance_arima1(idx_rebound-13:idx_rebound+1)','type','Kendall');
kendall6 = corr(variance_arima2_lux(idx_rebound-14:idx_rebound)',variance_arima2_lux(idx_rebound-13:idx_rebound+1)','type','Kendall');

figure()
h = zeros(1,7);
hold on
h(1)=plot(dates(idx_rebound-30:idx_rebound+10),variance_matrix(country,idx_rebound-30:idx_rebound+10),'-','linewidth',2,'color',[0, 0.4470, 0.7410],'DisplayName',strcat('Gauss, window = 7 days; \tau = ',num2str(round(kendall1,2))));
h(2)=plot(dates(idx_rebound-30:idx_rebound+10),variance_matrix1(country,idx_rebound-30:idx_rebound+10),'-.','linewidth',2,'color',[0, 0.4470, 0.7410],'DisplayName',strcat('Gauss, window = 14 days; \tau = ',num2str(round(kendall2,2))));
h(3)=plot(dates(idx_rebound-30:idx_rebound+10),variance_matrix2(country,idx_rebound-30:idx_rebound+10),'--','linewidth',2,'color',[0, 0.4470, 0.7410],'DisplayName',strcat('Gauss, window = 21 days; \tau = ',num2str(round(kendall3,2))));
h(4)=plot(dates(idx_rebound-30:idx_rebound+10),variance_arima_lux(idx_rebound-30:idx_rebound+10),'-','linewidth',2,'color',[0.8500, 0.3250, 0.0980],'DisplayName',strcat('ARIMA, window = 7 days; \tau = ',num2str(round(kendall4,2))));
h(5)=plot(dates(idx_rebound-30:idx_rebound+10),variance_arima1(idx_rebound-30:idx_rebound+10),'-.','linewidth',2,'color',[0.8500, 0.3250, 0.0980],'DisplayName',strcat('ARIMA, window = 14 days; \tau = ',num2str(round(kendall5,2))));
h(6)=plot(dates(idx_rebound-30:idx_rebound+10),variance_arima2_lux(idx_rebound-30:idx_rebound+10),'--','linewidth',2,'color',[0.8500, 0.3250, 0.0980],'DisplayName',strcat('ARIMA, window = 21 days; \tau = ',num2str(round(kendall6,2))));

h(7)=xline(rebound_vector(country),'--');
legend(h(1:6),'location','northwest','fontsize',12);
%title('Var for ' + country_names(country),'fontsize',14)
ylabel("Variance",'fontsize',14)

%% Fig 4 (global behavior)

% Probabilities of exponential increase (after posterior of R, see
% R_t-EWS.ipynb)

Luxembourg_prob = [1,0.990000000000000,0.960000000000000,0.950000000000000,0.910000000000000,0.820000000000000,0.730000000000000,0.530000000000000,0.620000000000000,0.550000000000000,0.330000000000000,0.280000000000000,0.320000000000000,0.240000000000000,0.160000000000000,0.100000000000000,0.110000000000000,0.0800000000000000,0.0600000000000000,0.0600000000000000,0.0200000000000000,0.0400000000000000,0.0500000000000000,0.0300000000000000,0.0400000000000000,0.0600000000000000,0.0800000000000000,0.160000000000000,0.140000000000000,0.0900000000000000,0.100000000000000,0.0700000000000000,0.0900000000000000,0.0900000000000000,0.0600000000000000,0.0600000000000000,0.0800000000000000,0.0800000000000000,0.0900000000000000,0.100000000000000,0.110000000000000,0.130000000000000,0.120000000000000,0.120000000000000,0.120000000000000,0.120000000000000,0.130000000000000,0.140000000000000,0.140000000000000,0.150000000000000,0.160000000000000,0.150000000000000,0.180000000000000,0.190000000000000,0.200000000000000,0.230000000000000,0.260000000000000,0.250000000000000,0.240000000000000,0.270000000000000,0.230000000000000,0.240000000000000,0.210000000000000,0.200000000000000,0.200000000000000,0.210000000000000,0.220000000000000,0.230000000000000,0.230000000000000,0.240000000000000,0.220000000000000,0.230000000000000,0.240000000000000,0.240000000000000,0.250000000000000,0.250000000000000,0.280000000000000,0.290000000000000,0.300000000000000,0.270000000000000,0.310000000000000,0.310000000000000,0.350000000000000,0.320000000000000,0.360000000000000,0.390000000000000,0.400000000000000,0.400000000000000,0.430000000000000,0.440000000000000,0.470000000000000,0.470000000000000,0.510000000000000,0.570000000000000,0.710000000000000,0.720000000000000,0.760000000000000,0.840000000000000,0.900000000000000,0.940000000000000,0.950000000000000,0.910000000000000,0.920000000000000,0.910000000000000,0.900000000000000,0.890000000000000,0.890000000000000,0.870000000000000,0.900000000000000,0.920000000000000,0.910000000000000,0.930000000000000,0.920000000000000,0.970000000000000,0.980000000000000,0.960000000000000,0.960000000000000,0.940000000000000,0.900000000000000,0.930000000000000,0.810000000000000,0.740000000000000,0.810000000000000,0.710000000000000,0.710000000000000,0.630000000000000,0.670000000000000,0.620000000000000,0.550000000000000,0.470000000000000,0.430000000000000,0.360000000000000,0.370000000000000,0.260000000000000,0.250000000000000,0.210000000000000,0.170000000000000,0.150000000000000,0.180000000000000,0.160000000000000,0.140000000000000,0.170000000000000,0.190000000000000,0.180000000000000,0.160000000000000];
Austria_prob = [0.900000000000000,1,1,1,1,1,1,0.980000000000000,0.890000000000000,0.540000000000000,0.790000000000000,0.0100000000000000,0,0,0,0,0,0,0,0,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0,0,0,0,0,0,0,0,0,0,0.0100000000000000,0.0200000000000000,0.0300000000000000,0.0500000000000000,0.0700000000000000,0.0700000000000000,0.110000000000000,0.0800000000000000,0.0700000000000000,0.0700000000000000,0.0500000000000000,0.0600000000000000,0.100000000000000,0.0600000000000000,0.110000000000000,0.140000000000000,0.140000000000000,0.250000000000000,0.290000000000000,0.290000000000000,0.380000000000000,0.480000000000000,0.490000000000000,0.520000000000000,0.450000000000000,0.460000000000000,0.430000000000000,0.400000000000000,0.310000000000000,0.260000000000000,0.320000000000000,0.250000000000000,0.270000000000000,0.260000000000000,0.260000000000000,0.230000000000000,0.330000000000000,0.260000000000000,0.290000000000000,0.260000000000000,0.260000000000000,0.310000000000000,0.380000000000000,0.280000000000000,0.490000000000000,0.430000000000000,0.480000000000000,0.480000000000000,0.460000000000000,0.350000000000000,0.440000000000000,0.330000000000000,0.460000000000000,0.420000000000000,0.410000000000000,0.480000000000000,0.580000000000000,0.530000000000000,0.570000000000000,0.490000000000000,0.570000000000000,0.580000000000000,0.580000000000000,0.590000000000000,0.730000000000000,0.770000000000000,0.780000000000000,0.880000000000000,0.900000000000000,0.940000000000000,0.960000000000000,0.960000000000000,0.950000000000000,0.930000000000000,0.880000000000000,0.890000000000000,0.840000000000000,0.740000000000000,0.710000000000000,0.620000000000000,0.650000000000000,0.720000000000000,0.720000000000000,0.810000000000000,0.870000000000000,0.780000000000000,0.810000000000000,0.790000000000000,0.710000000000000,0.770000000000000,0.640000000000000,0.600000000000000,0.700000000000000,0.660000000000000,0.700000000000000,0.800000000000000,0.650000000000000,0.740000000000000,0.630000000000000,0.530000000000000,0.520000000000000,0.470000000000000,0.300000000000000,0.390000000000000,0.340000000000000,0.360000000000000,0.420000000000000,0.420000000000000,0.520000000000000,0.740000000000000,0.740000000000000,0.900000000000000,0.990000000000000,0.980000000000000,0.990000000000000,0.990000000000000,0.990000000000000,1,0.990000000000000,0.960000000000000,0.920000000000000,0.930000000000000,0.790000000000000,0.820000000000000,0.750000000000000,0.550000000000000,0.690000000000000,0.640000000000000,0.670000000000000,0.630000000000000,0.600000000000000,0.690000000000000,0.830000000000000,0.720000000000000,0.690000000000000,0.670000000000000,0.940000000000000,0.970000000000000,0.990000000000000,1,1,1];
Victoria_prob = [0.900000000000000,0.410000000000000,0.580000000000000,0.700000000000000,0.850000000000000,0.920000000000000,0.890000000000000,0.770000000000000,0.850000000000000,0.880000000000000,0.850000000000000,0.840000000000000,0.800000000000000,0.580000000000000,0.420000000000000,0.360000000000000,0.240000000000000,0.200000000000000,0.130000000000000,0.100000000000000,0.110000000000000,0.110000000000000,0.120000000000000,0.0900000000000000,0.0900000000000000,0.0800000000000000,0.0900000000000000,0.0900000000000000,0.110000000000000,0.100000000000000,0.100000000000000,0.100000000000000,0.110000000000000,0.130000000000000,0.110000000000000,0.110000000000000,0.110000000000000,0.120000000000000,0.140000000000000,0.150000000000000,0.160000000000000,0.180000000000000,0.260000000000000,0.340000000000000,0.380000000000000,0.410000000000000,0.470000000000000,0.440000000000000,0.480000000000000,0.420000000000000,0.430000000000000,0.380000000000000,0.360000000000000,0.370000000000000,0.420000000000000,0.370000000000000,0.380000000000000,0.360000000000000,0.340000000000000,0.370000000000000,0.350000000000000,0.310000000000000,0.310000000000000,0.320000000000000,0.300000000000000,0.330000000000000,0.370000000000000,0.340000000000000,0.380000000000000,0.380000000000000,0.390000000000000,0.420000000000000,0.390000000000000,0.400000000000000,0.400000000000000,0.350000000000000,0.350000000000000,0.360000000000000,0.310000000000000,0.310000000000000,0.320000000000000,0.320000000000000,0.330000000000000,0.390000000000000,0.420000000000000,0.490000000000000,0.550000000000000,0.610000000000000,0.630000000000000,0.630000000000000,0.720000000000000,0.690000000000000,0.720000000000000,0.690000000000000,0.750000000000000,0.770000000000000,0.760000000000000,0.830000000000000,0.920000000000000,0.950000000000000,0.970000000000000,0.980000000000000,0.980000000000000,0.960000000000000,0.990000000000000,0.990000000000000,1,0.990000000000000,1,1,1,1,1,1,1,1,1,0.990000000000000,0.990000000000000,0.980000000000000,0.980000000000000,0.990000000000000,0.990000000000000,0.880000000000000,0.930000000000000,0.930000000000000,0.980000000000000,0.950000000000000,0.690000000000000,0.940000000000000,0.990000000000000,0.950000000000000,0.970000000000000,0.820000000000000,0.790000000000000,0.980000000000000,0.750000000000000,0.450000000000000,0.550000000000000,0.230000000000000,0.200000000000000,0.170000000000000,0.0400000000000000,0.0200000000000000,0.0500000000000000,0.0400000000000000,0.0300000000000000,0.0600000000000000,0.0700000000000000,0.0300000000000000,0.0800000000000000,0.0300000000000000,0.0200000000000000,0.0400000000000000,0.0200000000000000,0.0200000000000000,0.0300000000000000,0.0100000000000000,0.0200000000000000,0.0100000000000000,0.0100000000000000,0.0200000000000000,0.0100000000000000,0.0100000000000000,0.0300000000000000,0.0400000000000000,0.0500000000000000,0.0500000000000000,0.0500000000000000,0.0600000000000000,0.0700000000000000,0.0500000000000000,0.0400000000000000,0.0400000000000000,0.0400000000000000,0.0600000000000000];
Denmark_prob = [0.900000000000000,0.550000000000000,0.830000000000000,0.890000000000000,0.930000000000000,0.950000000000000,0.970000000000000,0.990000000000000,1,1,1,1,1,1,1,1,1,0.990000000000000,0.950000000000000,0.720000000000000,0.450000000000000,0.290000000000000,0.140000000000000,0.0500000000000000,0.0200000000000000,0.0400000000000000,0.0800000000000000,0.120000000000000,0.130000000000000,0.160000000000000,0.190000000000000,0.320000000000000,0.290000000000000,0.230000000000000,0.390000000000000,0.390000000000000,0.400000000000000,0.370000000000000,0.300000000000000,0.310000000000000,0.370000000000000,0.170000000000000,0.200000000000000,0.280000000000000,0.320000000000000,0.280000000000000,0.300000000000000,0.310000000000000,0.340000000000000,0.350000000000000,0.260000000000000,0.190000000000000,0.170000000000000,0.0900000000000000,0.0700000000000000,0.0700000000000000,0.0700000000000000,0.0600000000000000,0.0900000000000000,0.110000000000000,0.170000000000000,0.150000000000000,0.170000000000000,0.200000000000000,0.210000000000000,0.170000000000000,0.170000000000000,0.140000000000000,0.230000000000000,0.210000000000000,0.170000000000000,0.210000000000000,0.220000000000000,0.220000000000000,0.250000000000000,0.230000000000000,0.280000000000000,0.270000000000000,0.260000000000000,0.280000000000000,0.250000000000000,0.220000000000000,0.240000000000000,0.250000000000000,0.330000000000000,0.360000000000000,0.380000000000000,0.460000000000000,0.550000000000000,0.500000000000000,0.390000000000000,0.260000000000000,0.580000000000000,0.570000000000000,0.600000000000000,0.520000000000000,0.500000000000000,0.500000000000000,0.500000000000000,0.340000000000000,0.310000000000000,0.260000000000000,0.280000000000000,0.230000000000000,0.240000000000000,0.260000000000000,0.210000000000000,0.210000000000000,0.190000000000000,0.190000000000000,0.240000000000000,0.250000000000000,0.270000000000000,0.430000000000000,0.480000000000000,0.520000000000000,0.590000000000000,0.620000000000000,0.610000000000000,0.610000000000000,0.600000000000000,0.630000000000000,0.680000000000000,0.680000000000000,0.670000000000000,0.660000000000000,0.640000000000000,0.690000000000000,0.630000000000000,0.660000000000000,0.760000000000000,0.770000000000000,0.750000000000000,0.730000000000000,0.880000000000000,0.920000000000000,0.940000000000000,0.940000000000000,0.960000000000000,0.940000000000000,0.910000000000000,0.980000000000000,0.980000000000000,0.960000000000000,0.950000000000000,0.940000000000000,0.970000000000000,0.990000000000000,0.720000000000000,0.640000000000000,0.570000000000000,0.510000000000000,0.330000000000000,0.370000000000000,0.280000000000000,0.240000000000000,0.210000000000000,0.200000000000000,0.200000000000000,0.230000000000000,0.210000000000000,0.300000000000000,0.360000000000000,0.400000000000000,0.540000000000000,0.730000000000000,0.850000000000000,0.930000000000000,0.920000000000000,0.970000000000000,0.990000000000000,0.990000000000000,1,1,1,1];
Singapore_prob = [0.900000000000000,0.800000000000000,0.850000000000000,0.860000000000000,0.870000000000000,0.870000000000000,0.880000000000000,0.890000000000000,0.820000000000000,0.790000000000000,0.760000000000000,0.720000000000000,0.750000000000000,0.730000000000000,0.850000000000000,0.880000000000000,0.920000000000000,0.950000000000000,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.950000000000000,0.980000000000000,0.310000000000000,0.0300000000000000,0.0200000000000000,0,0.0300000000000000,0.0400000000000000,0.0200000000000000,0.0200000000000000,0.140000000000000,0.340000000000000,0.660000000000000,0.410000000000000,0.800000000000000,0.900000000000000,0.720000000000000,0.860000000000000,0.640000000000000,0.620000000000000,0.620000000000000,0.250000000000000,0.150000000000000,0.110000000000000,0.0200000000000000,0.0400000000000000,0.0100000000000000,0.0200000000000000,0.180000000000000,0.140000000000000,0.260000000000000,0.250000000000000,0.280000000000000,0.250000000000000,0.320000000000000,0.210000000000000,0.250000000000000,0.400000000000000,0.650000000000000,0.660000000000000,0.790000000000000,0.270000000000000,0.160000000000000,0.120000000000000,0.180000000000000,0.0300000000000000,0.0400000000000000,0.0500000000000000,0.310000000000000,0.360000000000000,0.440000000000000,0.220000000000000,0.210000000000000,0.0900000000000000,0.0500000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0200000000000000,0.0400000000000000,0.0500000000000000,0.0200000000000000,0.100000000000000,0.250000000000000,0.220000000000000,0.250000000000000,0.510000000000000,0.540000000000000,0.670000000000000,0.550000000000000,0.370000000000000,0.270000000000000,0.280000000000000,0.190000000000000,0.170000000000000,0.140000000000000,0.220000000000000,0.240000000000000,0.350000000000000,0.630000000000000,0.880000000000000,0.910000000000000,0.950000000000000,0.970000000000000,0.940000000000000,0.940000000000000,0.660000000000000,0.710000000000000,0.760000000000000,0.840000000000000,0.720000000000000,0.960000000000000,0.990000000000000,1,0.980000000000000,0.950000000000000,0.820000000000000,0.870000000000000,0.540000000000000,0.300000000000000,0.100000000000000,0.110000000000000,0.900000000000000,0.850000000000000,0.590000000000000,0.320000000000000,0.200000000000000,0.210000000000000,0.0700000000000000,0,0,0,0,0,0,0,0.0100000000000000,0.0100000000000000,0.0300000000000000,0.0400000000000000,0.0700000000000000,0.0600000000000000,0.0400000000000000,0.0400000000000000,0.0800000000000000,0.0800000000000000,0.100000000000000,0.100000000000000,0.110000000000000,0.160000000000000,0.110000000000000,0.100000000000000,0.0700000000000000,0.0800000000000000,0.0800000000000000,0.0800000000000000,0.110000000000000,0.250000000000000,0.300000000000000,0.430000000000000,0.470000000000000,0.490000000000000];
Veneto_prob = [0.900000000000000,0.0800000000000000,0.0200000000000000,0.0200000000000000,0.0100000000000000,0,0.0100000000000000,0,0,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0200000000000000,0.0200000000000000,0.0100000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0400000000000000,0.0500000000000000,0.0500000000000000,0.0400000000000000,0.0400000000000000,0.0500000000000000,0.0700000000000000,0.0400000000000000,0.0400000000000000,0.0500000000000000,0.0500000000000000,0.0600000000000000,0.0600000000000000,0.0600000000000000,0.0700000000000000,0.0700000000000000,0.0700000000000000,0.0800000000000000,0.0700000000000000,0.0700000000000000,0.0900000000000000,0.0900000000000000,0.0900000000000000,0.100000000000000,0.110000000000000,0.120000000000000,0.140000000000000,0.150000000000000,0.140000000000000,0.150000000000000,0.170000000000000,0.180000000000000,0.170000000000000,0.170000000000000,0.180000000000000,0.190000000000000,0.200000000000000,0.180000000000000,0.210000000000000,0.220000000000000,0.220000000000000,0.230000000000000,0.260000000000000,0.270000000000000,0.330000000000000,0.340000000000000,0.370000000000000,0.350000000000000,0.350000000000000,0.390000000000000,0.390000000000000,0.370000000000000,0.400000000000000,0.430000000000000,0.470000000000000,0.500000000000000,0.500000000000000,0.560000000000000,0.640000000000000,0.770000000000000,0.830000000000000,0.880000000000000,0.910000000000000,0.900000000000000,0.900000000000000,0.870000000000000,0.790000000000000,0.770000000000000,0.680000000000000,0.580000000000000,0.580000000000000,0.590000000000000,0.820000000000000,0.930000000000000,0.930000000000000,0.930000000000000,0.910000000000000,0.880000000000000,0.860000000000000,0.720000000000000,0.820000000000000,0.830000000000000,0.830000000000000,0.790000000000000,0.840000000000000,0.840000000000000,0.850000000000000,0.720000000000000,0.800000000000000,0.810000000000000,0.820000000000000,0.780000000000000,0.750000000000000,0.850000000000000,0.790000000000000,0.820000000000000,0.880000000000000,0.910000000000000,0.930000000000000,0.960000000000000,0.910000000000000,0.880000000000000,0.830000000000000,0.740000000000000,0.620000000000000,0.550000000000000,0.580000000000000,0.530000000000000,0.780000000000000,0.790000000000000,0.850000000000000,0.820000000000000,0.780000000000000,0.620000000000000,0.660000000000000,0.450000000000000,0.360000000000000,0.320000000000000];
Korea_prob = [0.900000000000000,0.180000000000000,0.210000000000000,0.280000000000000,0.220000000000000,0.260000000000000,0.290000000000000,0.210000000000000,0.400000000000000,0.530000000000000,0.530000000000000,0.490000000000000,0.480000000000000,0.380000000000000,0.340000000000000,0.310000000000000,0.200000000000000,0.160000000000000,0.120000000000000,0.0800000000000000,0.0500000000000000,0.0400000000000000,0.0400000000000000,0.0500000000000000,0.0500000000000000,0.0500000000000000,0.0600000000000000,0.0600000000000000,0.0500000000000000,0.0600000000000000,0.0600000000000000,0.0600000000000000,0.0600000000000000,0.0600000000000000,0.0600000000000000,0.0700000000000000,0.0800000000000000,0.0900000000000000,0.100000000000000,0.100000000000000,0.110000000000000,0.120000000000000,0.130000000000000,0.110000000000000,0.110000000000000,0.120000000000000,0.140000000000000,0.190000000000000,0.260000000000000,0.340000000000000,0.450000000000000,0.530000000000000,0.630000000000000,0.660000000000000,0.650000000000000,0.570000000000000,0.500000000000000,0.450000000000000,0.480000000000000,0.440000000000000,0.420000000000000,0.420000000000000,0.470000000000000,0.480000000000000,0.500000000000000,0.520000000000000,0.730000000000000,0.800000000000000,0.810000000000000,0.800000000000000,0.810000000000000,0.830000000000000,0.820000000000000,0.720000000000000,0.650000000000000,0.670000000000000,0.730000000000000,0.710000000000000,0.690000000000000,0.690000000000000,0.670000000000000,0.710000000000000,0.670000000000000,0.610000000000000,0.600000000000000,0.570000000000000,0.550000000000000,0.580000000000000,0.550000000000000,0.600000000000000,0.630000000000000,0.570000000000000,0.600000000000000,0.610000000000000,0.520000000000000,0.490000000000000,0.450000000000000,0.490000000000000,0.570000000000000,0.540000000000000,0.540000000000000,0.610000000000000,0.650000000000000,0.670000000000000,0.650000000000000,0.640000000000000,0.630000000000000,0.650000000000000,0.630000000000000,0.570000000000000,0.490000000000000,0.460000000000000,0.500000000000000,0.470000000000000,0.420000000000000,0.460000000000000,0.500000000000000,0.500000000000000,0.480000000000000,0.400000000000000,0.430000000000000,0.510000000000000,0.510000000000000,0.450000000000000,0.640000000000000,0.690000000000000,0.670000000000000,0.600000000000000,0.560000000000000,0.450000000000000,0.450000000000000,0.260000000000000,0.220000000000000,0.240000000000000,0.260000000000000,0.250000000000000,0.330000000000000,0.310000000000000,0.340000000000000,0.370000000000000,0.400000000000000,0.410000000000000,0.480000000000000,0.520000000000000,0.740000000000000,0.920000000000000,1,1,1,1,1,1,1,1,1,1,0.990000000000000,0.990000000000000,0.980000000000000,0.930000000000000,0.780000000000000,0.690000000000000,0.590000000000000,0.490000000000000,0.170000000000000,0.0800000000000000,0.0400000000000000,0.0300000000000000,0.0200000000000000,0.0200000000000000,0.0100000000000000,0.0200000000000000,0.0400000000000000,0.0500000000000000,0.0600000000000000,0.0900000000000000];
Israel_prob = [1,1,1,1,1,1,1,1,1,0.950000000000000,0.850000000000000,0.780000000000000,0.320000000000000,0.0100000000000000,0.0100000000000000,0.0200000000000000,0.0300000000000000,0.0300000000000000,0.0600000000000000,0.230000000000000,0.710000000000000,0.250000000000000,0.100000000000000,0.120000000000000,0.0700000000000000,0.0300000000000000,0.0100000000000000,0.0700000000000000,0.180000000000000,0.280000000000000,0.260000000000000,0.210000000000000,0.140000000000000,0.150000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0100000000000000,0.0100000000000000,0,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0300000000000000,0.0400000000000000,0.0400000000000000,0.0400000000000000,0.0600000000000000,0.110000000000000,0.260000000000000,0.610000000000000,0.620000000000000,0.760000000000000,0.880000000000000,0.950000000000000,0.970000000000000,0.970000000000000,0.910000000000000,0.980000000000000,0.980000000000000,0.990000000000000,0.980000000000000,0.980000000000000,0.990000000000000,1,0.980000000000000,0.950000000000000,0.920000000000000,0.950000000000000,0.970000000000000,0.960000000000000,0.960000000000000,0.970000000000000,0.960000000000000,0.970000000000000,0.990000000000000,1,0.990000000000000,0.990000000000000,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.990000000000000,0.990000000000000,1,1,1,1,0.960000000000000,1,0.790000000000000,0.450000000000000,0.760000000000000,0.820000000000000,0.720000000000000,0.720000000000000,0.0900000000000000,0.560000000000000,0.800000000000000,0.870000000000000,0.710000000000000,0.480000000000000,0.100000000000000,0.290000000000000,0.0300000000000000,0.0200000000000000,0.0100000000000000,0.0200000000000000,0.0800000000000000,0.680000000000000,0.690000000000000,0.690000000000000,0.720000000000000,0.730000000000000,0.490000000000000,0.530000000000000,0.360000000000000,0.270000000000000,0.190000000000000];
Japan_prob = [0.960000000000000,0.980000000000000,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.990000000000000,0.970000000000000,0.890000000000000,0.740000000000000,0.540000000000000,0.330000000000000,0.440000000000000,0.310000000000000,0.180000000000000,0.140000000000000,0.0800000000000000,0.0300000000000000,0.0200000000000000,0.0200000000000000,0.0200000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0200000000000000,0.0500000000000000,0.0900000000000000,0.0400000000000000,0.0300000000000000,0.0200000000000000,0.0100000000000000,0,0,0,0,0,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0200000000000000,0.0100000000000000,0.0200000000000000,0.0100000000000000,0.0100000000000000,0.0100000000000000,0.0300000000000000,0.0300000000000000,0.0500000000000000,0.0600000000000000,0.100000000000000,0.210000000000000,0.280000000000000,0.280000000000000,0.340000000000000,0.410000000000000,0.420000000000000,0.370000000000000,0.320000000000000,0.330000000000000,0.350000000000000,0.330000000000000,0.340000000000000,0.380000000000000,0.370000000000000,0.440000000000000,0.450000000000000,0.550000000000000,0.670000000000000,0.640000000000000,0.660000000000000,0.680000000000000,0.680000000000000,0.720000000000000,0.650000000000000,0.560000000000000,0.590000000000000,0.680000000000000,0.730000000000000,0.780000000000000,0.800000000000000,0.860000000000000,0.910000000000000,0.950000000000000,0.980000000000000,0.990000000000000,0.990000000000000,1,1,0.990000000000000,0.990000000000000,0.970000000000000,0.980000000000000,1,1,1,1,0.990000000000000,1,1,1,1,1,0.980000000000000,1,0.970000000000000,1,1,0.970000000000000,0.990000000000000,1,0.990000000000000,1,1,1,1,1,1,1,0.970000000000000,0.650000000000000,0.940000000000000,0.830000000000000,0.820000000000000,0.580000000000000,0.100000000000000,0.0500000000000000,0.0400000000000000,0.0500000000000000,0.0300000000000000,0.0100000000000000];
Nepal_prob = [0.900000000000000,0.850000000000000,0.920000000000000,0.900000000000000,0.860000000000000,0.940000000000000,0.990000000000000,1,1,1,1,1,1,1,1,1,1,1,1,0.990000000000000,0.980000000000000,0.900000000000000,0.950000000000000,0.860000000000000,0.950000000000000,0.970000000000000,0.950000000000000,0.990000000000000,1,0.990000000000000,0.970000000000000,0.920000000000000,0.910000000000000,0.930000000000000,0.890000000000000,0.530000000000000,0.740000000000000,0.890000000000000,0.850000000000000,0.710000000000000,0.360000000000000,0.230000000000000,0.350000000000000,0.590000000000000,0.180000000000000,0.100000000000000,0.0300000000000000,0.0300000000000000,0.0100000000000000,0,0,0,0,0,0,0,0,0,0.0100000000000000,0.0600000000000000,0.130000000000000,0.220000000000000,0.230000000000000,0.240000000000000,0.330000000000000,0.450000000000000,0.410000000000000,0.340000000000000,0.680000000000000,0.820000000000000,0.920000000000000,0.940000000000000,0.990000000000000,0.990000000000000,1,0.980000000000000,0.990000000000000,0.990000000000000,1,0.990000000000000,0.990000000000000,0.910000000000000,0.990000000000000,0.990000000000000,0.990000000000000,0.980000000000000,0.970000000000000,0.990000000000000,0.990000000000000,1,1,0.990000000000000,0.990000000000000,0.980000000000000,0.980000000000000,0.970000000000000,0.780000000000000,0.870000000000000,0.980000000000000,0.940000000000000,0.960000000000000,0.990000000000000,0.970000000000000,0.970000000000000,0.970000000000000,0.930000000000000,0.980000000000000,0.960000000000000,0.660000000000000,0.690000000000000,0.450000000000000,0.430000000000000,0.490000000000000,0.600000000000000,0.720000000000000,0.710000000000000];

%
country = [2, 7, 1, 4];

% Luxembourg
figure()

% subplot(6,1,1);
% plot(dates(100:180),smoothed_daily_matrix(country,100:180))
% xline(rebound_vector(country));
% ylabel("Data")
% title('EWS for ' + country_names(country))
% dateFormat = 19;
% datetick('x',dateFormat,'keepticks')

subplot(5,1,1);
plot(dates(90:140),Luxembourg_prob(64:114),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("$\mathcal{P}(R>1)$",'Interpreter','latex','fontsize',12)
title('EWS for ' + country_names(country(2)))
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,2);
plot(dates(90:150),variance_matrix1(country(2),90:150),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("Var",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,3);
plot(dates(90:150),AC_matrix(country(2),90:150),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("$AC(1)$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,4);
plot(dates(90:150),CV_matrix(country(2),90:150),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("$CV$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,5);
plot(dates(90:150),skewness_matrix(country(2),90:150),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("Skew",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')


% Austria 

figure()

% subplot(6,1,1);
% plot(dates(100:180),smoothed_daily_matrix(country,100:180))
% xline(rebound_vector(country));
% ylabel("Data")
% title('EWS for ' + country_names(country))
% dateFormat = 19;
% datetick('x',dateFormat,'keepticks')

subplot(5,1,1);
plot(dates(92:142),Austria_prob(66:116),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("$\mathcal{P}(R>1)$",'Interpreter','latex','fontsize',12)
title('EWS for ' + country_names(country(1)))
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,2);
plot(dates(92:142),variance_matrix1(country(1),92:142),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("Var",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,3);
plot(dates(92:142),AC_matrix(country(1),92:142),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("$AC(1)$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,4);
plot(dates(92:142),CV_matrix(country(1),92:142),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("$CV$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,5);
plot(dates(92:142),skewness_matrix(country(1),92:142),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("Skew",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')


% State of Victoria (AUS) 

figure()

% subplot(6,1,1);
% plot(dates(100:180),smoothed_daily_matrix(country,100:180))
% xline(rebound_vector(country));
% ylabel("Data")
% title('EWS for ' + country_names(country))
% dateFormat = 19;
% datetick('x',dateFormat,'keepticks')

subplot(5,1,1);
plot(dates(88:138),Victoria_prob(62:112),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("$\mathcal{P}(R>1)$",'Interpreter','latex','fontsize',12)
title('EWS for ' + country_names(country(3)))
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,2);
plot(dates(88:138),variance_matrix1(country(3),88:138),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("Var",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,3);
plot(dates(88:138),AC_matrix(country(3),88:138),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("$AC(1)$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,4);
plot(dates(88:138),CV_matrix(country(3),88:138),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("$CV$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,5);
plot(dates(88:138),skewness_matrix(country(3),88:138),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("Skew",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')


% Israel

figure()

% subplot(6,1,1);
% plot(dates(100:180),smoothed_daily_matrix(country,100:180))
% xline(rebound_vector(country));
% ylabel("Data")
% title('EWS for ' + country_names(country))
% dateFormat = 19;
% datetick('x',dateFormat,'keepticks')

subplot(5,1,1);
plot(dates(60:110),Israel_prob(34:84),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("$\mathcal{P}(R>1)$",'Interpreter','latex','fontsize',12)
title('EWS for ' + country_names(country(4)))
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,2);
plot(dates(60:110),variance_matrix1(country(4),60:110),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("Var",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,3);
plot(dates(60:110),AC_matrix(country(4),60:110),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("$AC(1)$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,4);
plot(dates(60:110),CV_matrix(country(4),60:110),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("$CV$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,5);
plot(dates(60:110),skewness_matrix(country(4),60:110),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("Skew",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

%% Fig 5a: ROC
country = [1, 2, 5, 7, 9, 10];
idx_rebound_vec = zeros(1,6);
for a=1:6
    idx_rebound_vec(a) = find(dates == rebound_vector(country(a))); 
end

% window size = 14

lead_time = -21 : 1 : 7;
tau_p = 0. : 0.01 : 1;

% 1 = var ; 2 = AC(1) ; 3 = CV ; 4 = Skew
true_pos  = zeros(4,length(tau_p));
false_pos = zeros(4,length(tau_p));

% var
kendall_matrix_var = zeros(6,length(lead_time));  % for each country, for each lead time
for m=1:6
    for n=1:length(lead_time)
        kendall_matrix_var(m,n) = corr(variance_matrix1(country(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',variance_matrix1(country(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_var(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos(1,p) = true_pos(1,p) + 1;                 
            else
                if (kendall_matrix_var(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos(1,p) = false_pos(1,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_ac = zeros(6,length(lead_time));  % for each country, for each lead time
for m=1:6
    for n=1:length(lead_time)
        kendall_matrix_ac(m,n) = corr(AC_matrix(country(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',AC_matrix(country(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_ac(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos(2,p) = true_pos(2,p) + 1;                 
            else
                if (kendall_matrix_ac(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos(2,p) = false_pos(2,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_cv = zeros(6,length(lead_time));  % for each country, for each lead time
for m=1:6
    for n=1:length(lead_time)
        kendall_matrix_cv(m,n) = corr(CV_matrix(country(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',CV_matrix(country(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_cv(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos(3,p) = true_pos(3,p) + 1;                 
            else
                if (kendall_matrix_cv(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos(3,p) = false_pos(3,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_ske = zeros(6,length(lead_time));  % for each country, for each lead time
for m=1:6
    for n=1:length(lead_time)
        kendall_matrix_ske(m,n) = corr(skewness_matrix(country(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',skewness_matrix(country(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_ske(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos(4,p) = true_pos(4,p) + 1;                 
            else
                if (kendall_matrix_ske(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos(4,p) = false_pos(4,p) + 1;   
                end
            end
        end
    end
end

true_pos_rate = true_pos ./ 54;  %54 = max true positive
false_pos_rate = false_pos ./ 120;  %120 = max false positive

AUC = abs( [trapz(false_pos_rate(1,1:end), true_pos_rate(1,1:end)), trapz(false_pos_rate(2,1:end), true_pos_rate(2,1:end)), trapz(false_pos_rate(3,1:end), true_pos_rate(3,1:end)), trapz(false_pos_rate(4,1:end), true_pos_rate(4,1:end)) ]);

best_tau_p_ac = tau_p( find(round(false_pos_rate(2,1:end),5) == 0.26667, 1) );
best_tau_p_var = tau_p( find(round(false_pos_rate(1,1:end),5) == 0.36667, 1) );

x = linspace(0,1);

figure()
hold on
plot(false_pos_rate(1,1:end),true_pos_rate(1,1:end),'linewidth',1.5)
plot(false_pos_rate(2,1:end),true_pos_rate(2,1:end),'linewidth',1.5)
plot(false_pos_rate(3,1:end),true_pos_rate(3,1:end),'linewidth',1.5)
plot(false_pos_rate(4,1:end),true_pos_rate(4,1:end),'linewidth',1.5)
plot(x,x,'--','color','black')
legend({'Variance','AC(1)','CV','Skewness'},'Location','northwest','fontsize',13)
ylabel("Sensitivity",'fontsize',14)
xlabel("1-Specificity",'fontsize',14)
hold off


%% AUC for out-of-test-set countries
country_out = [3, 4, 6, 8];
idx_rebound_vec = zeros(1,length(country_out));
for a=1:length(country_out)
    idx_rebound_vec(a) = find(dates == rebound_vector(country_out(a))); 
end

% 1 = var ; 2 = AC(1) ; 3 = CV ; 4 = Skew
true_pos_out  = zeros(4,length(tau_p));
false_pos_out = zeros(4,length(tau_p));

% var
kendall_matrix_var = zeros(length(country_out),length(lead_time));  % for each country, for each lead time
for m=1:length(country_out)
    for n=1:length(lead_time)
        kendall_matrix_var(m,n) = corr(variance_matrix1(country_out(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',variance_matrix1(country_out(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_var(m,n) > tau_p(p)) && lead_time(n) > -2 && ( variance_matrix1(country_out(m),idx_rebound_vec(m)-1) - variance_matrix1(country_out(m),idx_rebound_vec(m)-2) ) > 0  % make sure that the trend is upwards
                 true_pos_out(1,p) = true_pos_out(1,p) + 1;                 
            else
                if (kendall_matrix_var(m,n) > tau_p(p)) && lead_time(n) <=-2  
                 false_pos_out(1,p) = false_pos_out(1,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_ac = zeros(length(country_out),length(lead_time));  % for each country, for each lead time
for m=1:length(country_out)
    for n=1:length(lead_time)
        kendall_matrix_ac(m,n) = corr(AC_matrix(country_out(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',AC_matrix(country_out(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_ac(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos_out(2,p) = true_pos_out(2,p) + 1;                 
            else
                if (kendall_matrix_ac(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos_out(2,p) = false_pos_out(2,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_cv = zeros(length(country_out),length(lead_time));  % for each country, for each lead time
for m=1:length(country_out)
    for n=1:length(lead_time)
        kendall_matrix_cv(m,n) = corr(CV_matrix(country_out(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',CV_matrix(country_out(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_cv(m,n) > tau_p(p)) && lead_time(n) > -2  && ( CV_matrix(country_out(m),idx_rebound_vec(m)-1) - CV_matrix(country_out(m),idx_rebound_vec(m)-2) ) > 0  
                 true_pos_out(3,p) = true_pos_out(3,p) + 1;                 
            else
                if (kendall_matrix_cv(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos_out(3,p) = false_pos_out(3,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_ske = zeros(length(country_out),length(lead_time));  % for each country, for each lead time
for m=1:length(country_out)
    for n=1:length(lead_time)
        kendall_matrix_ske(m,n) = corr(skewness_matrix(country_out(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',skewness_matrix(country_out(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_ske(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos_out(4,p) = true_pos_out(4,p) + 1;                 
            else
                if (kendall_matrix_ske(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos_out(4,p) = false_pos_out(4,p) + 1;   
                end
            end
        end
    end
end

true_pos_rate_out = true_pos_out ./ 36;  %36 = max true positive
false_pos_rate_out = false_pos_out ./ 80;  %80 = max false positive

best_tau_p_var_out = tau_p( find(round(false_pos_rate_out(1,1:end),4) == 0.2125, 1) );
AUC_out = abs( [trapz(false_pos_rate_out(1,1:end), true_pos_rate_out(1,1:end)), trapz(false_pos_rate_out(2,1:end), true_pos_rate_out(2,1:end)), trapz(false_pos_rate_out(3,1:end), true_pos_rate_out(3,1:end)), trapz(false_pos_rate_out(4,1:end), true_pos_rate_out(4,1:end)) ]);




%% Arima plots

country = [2, 7, 1, 4];

% Luxembourg
figure()

% subplot(6,1,1);
% plot(dates(100:180),smoothed_daily_matrix(country,100:180))
% xline(rebound_vector(country));
% ylabel("Data")
% title('EWS for ' + country_names(country))
% dateFormat = 19;
% datetick('x',dateFormat,'keepticks')

subplot(5,1,1);
plot(dates(80:160),Luxembourg_prob(54:134),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("$\mathcal{P}(R>1)$",'Interpreter','latex','fontsize',12)
title('EWS for ' + country_names(country(2)))
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,2);
plot(dates(80:160),variance_matrix_arima(country(2),80:160),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("Var",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,3);
plot(dates(80:160),AC_matrix_arima(country(2),80:160),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("$AC(1)$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,4);
plot(dates(80:160),CV_matrix_arima(country(2),80:160),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("$CV$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,5);
plot(dates(80:160),skewness_matrix_arima(country(2),80:160),'linewidth',1.2)
xline(rebound_vector(country(2)));
ylabel("Skew",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')


% Austria 

figure()

% subplot(6,1,1);
% plot(dates(100:180),smoothed_daily_matrix(country,100:180))
% xline(rebound_vector(country));
% ylabel("Data")
% title('EWS for ' + country_names(country))
% dateFormat = 19;
% datetick('x',dateFormat,'keepticks')

subplot(5,1,1);
plot(dates(82:162),Austria_prob(56:136),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("$\mathcal{P}(R>1)$",'Interpreter','latex','fontsize',12)
title('EWS for ' + country_names(country(1)))
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,2);
plot(dates(82:162),variance_matrix_arima(country(1),82:162),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("Var",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,3);
plot(dates(82:162),AC_matrix_arima(country(1),82:162),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("$AC(1)$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,4);
plot(dates(82:162),CV_matrix_arima(country(1),82:162),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("$CV$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,5);
plot(dates(82:162),skewness_matrix_arima(country(1),82:162),'linewidth',1.2)
xline(rebound_vector(country(1)));
ylabel("Skew",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')


% State of Victoria (AUS) 

figure()

% subplot(6,1,1);
% plot(dates(100:180),smoothed_daily_matrix(country,100:180))
% xline(rebound_vector(country));
% ylabel("Data")
% title('EWS for ' + country_names(country))
% dateFormat = 19;
% datetick('x',dateFormat,'keepticks')

subplot(5,1,1);
plot(dates(78:158),Victoria_prob(52:132),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("$\mathcal{P}(R>1)$",'Interpreter','latex','fontsize',12)
title('EWS for ' + country_names(country(3)))
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,2);
plot(dates(78:158),variance_matrix_arima(country(3),78:158),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("Var",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,3);
plot(dates(78:158),AC_matrix_arima(country(3),78:158),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("$AC(1)$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,4);
plot(dates(78:158),CV_matrix_arima(country(3),78:158),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("$CV$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,5);
plot(dates(78:158),skewness_matrix_arima(country(3),78:158),'linewidth',1.2)
xline(rebound_vector(country(3)));
ylabel("Skew",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')


% Israel

figure()

% subplot(6,1,1);
% plot(dates(100:180),smoothed_daily_matrix(country,100:180))
% xline(rebound_vector(country));
% ylabel("Data")
% title('EWS for ' + country_names(country))
% dateFormat = 19;
% datetick('x',dateFormat,'keepticks')

subplot(5,1,1);
plot(dates(50:130),Israel_prob(24:104),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("$\mathcal{P}(R>1)$",'Interpreter','latex','fontsize',12)
title('EWS for ' + country_names(country(4)))
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,2);
plot(dates(50:130),variance_matrix_arima(country(4),50:130),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("Var",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,3);
plot(dates(50:130),AC_matrix_arima(country(4),50:130),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("$AC(1)$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,4);
plot(dates(50:130),CV_matrix_arima(country(4),50:130),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("$CV$",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')

subplot(5,1,5);
plot(dates(50:130),skewness_matrix_arima(country(4),50:130),'linewidth',1.2)
xline(rebound_vector(country(4)));
ylabel("Skew",'Interpreter','latex','fontsize',12)
dateFormat = 19;
datetick('x',dateFormat,'keepticks')


%% Fig 5b: ROC Arima
country = [1, 2, 6, 7, 9, 10];
idx_rebound_vec = zeros(1,6);
for a=1:6
    idx_rebound_vec(a) = find(dates == rebound_vector(country(a))); 
end

% window size = 14

lead_time = -21 : 1 : 7;
tau_p = 0. : 0.01 : 1;

% 1 = var ; 2 = AC(1) ; 3 = CV ; 4 = Skew
true_pos  = zeros(4,length(tau_p));
false_pos = zeros(4,length(tau_p));

% var
kendall_matrix_var = zeros(6,length(lead_time));  % for each country, for each lead time
for m=1:6
    for n=1:length(lead_time)
        kendall_matrix_var(m,n) = corr(variance_matrix_arima(country(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',variance_matrix_arima(country(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_var(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos(1,p) = true_pos(1,p) + 1;                 
            else
                if (kendall_matrix_var(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos(1,p) = false_pos(1,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_ac = zeros(6,length(lead_time));  % for each country, for each lead time
for m=1:6
    for n=1:length(lead_time)
        kendall_matrix_ac(m,n) = corr(AC_matrix_arima(country(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',AC_matrix_arima(country(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_ac(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos(2,p) = true_pos(2,p) + 1;                 
            else
                if (kendall_matrix_ac(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos(2,p) = false_pos(2,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_cv = zeros(6,length(lead_time));  % for each country, for each lead time
for m=1:6
    for n=1:length(lead_time)
        kendall_matrix_cv(m,n) = corr(CV_matrix_arima(country(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',CV_matrix_arima(country(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_cv(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos(3,p) = true_pos(3,p) + 1;                 
            else
                if (kendall_matrix_cv(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos(3,p) = false_pos(3,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_ske = zeros(6,length(lead_time));  % for each country, for each lead time
for m=1:6
    for n=1:length(lead_time)
        kendall_matrix_ske(m,n) = corr(skewness_matrix_arima(country(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',skewness_matrix_arima(country(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_ske(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos(4,p) = true_pos(4,p) + 1;                 
            else
                if (kendall_matrix_ske(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos(4,p) = false_pos(4,p) + 1;   
                end
            end
        end
    end
end

true_pos_rate_arima = true_pos ./ 54;  %54 = max true positive
false_pos_rate_arima = false_pos ./ 120;  %120 = max false positive

AUC_arima = abs( [trapz(false_pos_rate_arima(1,1:end), true_pos_rate_arima(1,1:end)), trapz(false_pos_rate_arima(2,1:end), true_pos_rate_arima(2,1:end)), trapz(false_pos_rate_arima(3,1:end), true_pos_rate_arima(3,1:end)), trapz(false_pos_rate_arima(4,1:end), true_pos_rate_arima(4,1:end)) ]);

% best_tau_p_ac = tau_p( find(round(false_pos_rate(2,1:end),5) == 0.26667, 1) );
% best_tau_p_var = tau_p( find(round(false_pos_rate(1,1:end),5) == 0.36667, 1) );

x = linspace(0,1);

figure()
hold on
plot(false_pos_rate_arima(1,1:end),true_pos_rate_arima(1,1:end),'linewidth',1.5)
plot(false_pos_rate_arima(2,1:end),true_pos_rate_arima(2,1:end),'linewidth',1.5)
plot(false_pos_rate_arima(3,1:end),true_pos_rate_arima(3,1:end),'linewidth',1.5)
plot(false_pos_rate_arima(4,1:end),true_pos_rate_arima(4,1:end),'linewidth',1.5)
plot(x,x,'--','color','black')
legend({'Variance','AC(1)','CV','Skewness'},'Location','northwest','fontsize',13)
ylabel("Sensitivity",'fontsize',14)
xlabel("1-Specificity",'fontsize',14)
hold off


%% AUC ARIMA for out-of-test-set countries
country_out = [3, 4, 5, 8];
idx_rebound_vec = zeros(1,length(country_out));
for a=1:length(country_out)
    idx_rebound_vec(a) = find(dates == rebound_vector(country_out(a))); 
end

% 1 = var ; 2 = AC(1) ; 3 = CV ; 4 = Skew
true_pos_out_arima  = zeros(4,length(tau_p));
false_pos_out_arima = zeros(4,length(tau_p));

% var
kendall_matrix_var_arima = zeros(length(country_out),length(lead_time));  % for each country, for each lead time
for m=1:length(country_out)
    for n=1:length(lead_time)
        kendall_matrix_var_arima(m,n) = corr(variance_matrix_arima(country_out(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',variance_matrix_arima(country_out(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_var_arima(m,n) > tau_p(p)) && lead_time(n) > -2 && ( variance_matrix_arima(country_out(m),idx_rebound_vec(m)-1) - variance_matrix_arima(country_out(m),idx_rebound_vec(m)-2) ) > 0  % make sure that the trend is upwards
                 true_pos_out_arima(1,p) = true_pos_out_arima(1,p) + 1;                 
            else
                if (kendall_matrix_var_arima(m,n) > tau_p(p)) && lead_time(n) <=-2  
                 false_pos_out_arima(1,p) = false_pos_out_arima(1,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_ac_arima = zeros(length(country_out),length(lead_time));  % for each country, for each lead time
for m=1:length(country_out)
    for n=1:length(lead_time)
        kendall_matrix_ac_arima(m,n) = corr(AC_matrix_arima(country_out(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',AC_matrix_arima(country_out(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_ac_arima(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos_out_arima(2,p) = true_pos_out_arima(2,p) + 1;                 
            else
                if (kendall_matrix_ac_arima(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos_out_arima(2,p) = false_pos_out_arima(2,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_cv_arima = zeros(length(country_out),length(lead_time));  % for each country, for each lead time
for m=1:length(country_out)
    for n=1:length(lead_time)
        kendall_matrix_cv_arima(m,n) = corr(CV_matrix_arima(country_out(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',CV_matrix_arima(country_out(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_cv_arima(m,n) > tau_p(p)) && lead_time(n) > -2  && ( CV_matrix_arima(country_out(m),idx_rebound_vec(m)-1) - CV_matrix_arima(country_out(m),idx_rebound_vec(m)-2) ) > 0  
                 true_pos_out_arima(3,p) = true_pos_out_arima(3,p) + 1;                 
            else
                if (kendall_matrix_cv_arima(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos_out_arima(3,p) = false_pos_out_arima(3,p) + 1;   
                end
            end
        end
    end
end

kendall_matrix_ske_arima = zeros(length(country_out),length(lead_time));  % for each country, for each lead time
for m=1:length(country_out)
    for n=1:length(lead_time)
        kendall_matrix_ske_arima(m,n) = corr(skewness_matrix_arima(country_out(m),idx_rebound_vec(m)+lead_time(n)-14:idx_rebound_vec(m)+lead_time(n))',skewness_matrix_arima(country_out(m),idx_rebound_vec(m)+lead_time(n)-14+1:idx_rebound_vec(m)+lead_time(n)+1)','type','Kendall');
        for p=1:length(tau_p)
            if (kendall_matrix_ske_arima(m,n) > tau_p(p)) && lead_time(n) > -2
                 true_pos_out_arima(4,p) = true_pos_out_arima(4,p) + 1;                 
            else
                if (kendall_matrix_ske_arima(m,n) > tau_p(p)) && lead_time(n) <=-2
                 false_pos_out_arima(4,p) = false_pos_out_arima(4,p) + 1;   
                end
            end
        end
    end
end

true_pos_rate_out_arima = true_pos_out_arima ./ 36;  %36 = max true positive
false_pos_rate_out_arima = false_pos_out_arima ./ 80;  %80 = max false positive

best_tau_p_var_out_arima = tau_p( find(round(false_pos_rate_out_arima(1,1:end),4) == 0.2125, 1) );
AUC_out_arima = abs( [trapz(false_pos_rate_out_arima(1,1:end), true_pos_rate_out_arima(1,1:end)), trapz(false_pos_rate_out_arima(2,1:end), true_pos_rate_out_arima(2,1:end)), trapz(false_pos_rate_out_arima(3,1:end), true_pos_rate_out_arima(3,1:end)), trapz(false_pos_rate_out_arima(4,1:end), true_pos_rate_out_arima(4,1:end)) ]);

end
